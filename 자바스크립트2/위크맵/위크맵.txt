위크맵
    : 맵과 위크맵의 차이는 위크맵의 키가 반드시 "객체" 이어야 한다.
    : 원시값은 위크맵의 키가 될 수 없다.
    : 위크맵의 키로 사용된 객체를 참조하는 것이 아무것도 없다면 해당 객체는 메모리와 위크맵에서 자동으로 삭제된다.

    - weakMap.get(key)
    - weakMap.set(key, value)
    - weakMap.delete(key)
    - weakMap.has(key)


유스케이스 : 추가 데이터
    - 위크맵은 부차적인 데이터를 저장할 곳이 필요할 때 그 진가를 발휘함.
    - 위크맵에 원하는 데이터를 저장하고, 이때 키는 객체를 사용하면 된다. 이렇게 하면 객체가 가비지 컬렉션의 대상이 될 때, 데이터도 함께 사라진다.

유스케이스 : 캐싱
    - 위크맵은 캐싱(caching)이 필요할 때 유용하다.
    - 캐싱은 시간이 오래 걸리는 작업의 결과를 저장해서 연산 시간과 비용을 절약해주는 기법이다.
    - 동일한 함수를 여러 번 호출해야 할 때, 최초 호출 시 반환된 값을 어딘가 저장해 놓았다가 그 다음엔 함수를 호출하는 대신 저장된 값을 사용하는게 캐싱의 실례이다.


위크셋
    : 위크셋은 셋과 유사한데, 객체만 저장할 수 있다는 점이 다르다. 원시값은 저장할 수 없다.
    : 셋 안의 객체는 도달 가능할 때만 메모리에서 유지된다.
    : 셋 과 마찬가지로 위크셋이 지원하는 메서드는 단출하다.
            - add 
            - has
            - delete

            [반복작업 관련 메서드는 사용할 수 없다]
            - size
            - keys()