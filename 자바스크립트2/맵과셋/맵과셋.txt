맵과 셋
객체 : 키가 있는 컬렉션을 저장함.
배열 : 순서가 있는 컬렉션을 저장함.
            - 두 자료구조 만으론 부족해서 맵(Map) 과 셋(Set)이 등장함.


[맵]
: 맵(Map)은 키가 있는 데이터를 저장한다는 점에서 객체와 유사하다. 맵은 키에 다양한 자료형을 허용한다는 점에서 차이가 있다.
    - new Map() : 맵을 만든다.
    - map.set(key, value) : key를 이용해 value를 저장한다.
    - map.get(key) : key에 해당하는 값을 반환한다. key가 존재하지 않으면 undefined를 반환한다.
    - map.has(key) : key가 존재하면 true, 존재하지 않으면 false를 반환한다.
    - map.delete(key) : key에 해당하는 값을 삭제한다.
    - map.clear() : 맵 안의 모든 요소를 제거한다.
    - map.size : 요소의 개수를 반환한다.


[맵의 요소에 반복 작업하기]
    - map.keys() : 각 요소의 키를 모은 반복 가능한(iterable, 이터러블) 객체를 반환한다.
    - map.values() : 각 요소의 값을 모은 이터러블 객체를 반환한다.
    - map.entries() : 요소의 [키, 값]을 한 쌍으로 하는 이터러블 객체를 반환한다. 이터러블 객체는 for..of 반복문의 기초로 쓰인다.

[Object.entries] : 객체를 맵으로 바꾸기

[Object.fromEntries] : 맵을 객체로 바꾸기

=============================
[셋]
: 셋(set)은 중복을 허용하지 않는 값을 모아놓은 특별한 컬렉션이다. 셋에 키가 없는 값이 저장된다.
    - new Set(iterable) : 셋을 만든다. 
                        : 이터러블 객체를 전달받으면(대개 배열을 전달받음) 그 안의 값을 복사해 셋에 넣어준다.
    - set.add(value) : 값을 추가하고 셋 자신을 반환한다.
    - set.delete(value) : 값을 제거한다.
                        : 호출 시점에 셋 내에 값이 있어서 제거에 성공하면 true, 아니면 false를 반환한다.
    - set.has(value) : 셋 내에 값이 존재하면 true, 아니면 false를 반환한다.
    - set.clear() : 셋을 비운다.
    - set.size : 셋에 몇 개의 값이 있는지 세준다.

[셋의 값에 반복 작업하기]
    - set.keys() : 셋 내의 모든 값을 포함하는 이터러블 객체를 반환한다.
    - set.values() : set.keys 와 동일한 작업을 한다. 맵 과의 호환성을 위해 만들어진 메서드이다.
    - set.entries() : 셋 내의 각 값을 이용해 만든 [value, value] 배열을 포함하는 이터러블 객체를 반환한다.
                    : 맵과의 호환성을 위해 만들어졌다.


